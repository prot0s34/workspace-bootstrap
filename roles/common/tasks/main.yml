---
- name: Check Ubuntu version
  fail:
    msg: "This playbook is intended for Ubuntu 20.04 only."
  when: ansible_distribution != 'Ubuntu' or ansible_distribution_version != '20.04'

- name: User Make Dirs
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - "~/.npm-global"
    - "~/.local/share/fonts/"
    - "~/.local/share/nvim/site/autoload/"

- name: Root Make Dirs
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - "/etc/apt/keyrings"
  become: true

- name: Update apt cache
  become: true
  apt:
    update_cache: true

- name: Install APT packages
  become: true
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - tmux
    - git
    - bat # https://github.com/sharkdp/bat
    - make
    - pip
    - python
    - ca-certificates 
    - curl 
    - gnupg
    - zsh
    - zip
    - pigz
    - pip3

- name: Install SNAP packages
  snap:
    name: "{{ item }}"
    classic: true
  become: true
  loop:
    - btop # https://github.com/aristocratos/btop
    - node

- name: Binaries Compressed - Fetch and Install
  become: true
  ansible.builtin.unarchive:
    src: "{{ item }}"
    remote_src: true
    dest: /usr/local/bin
    mode: "ugo+rx"
  loop:
    - "https://github.com/dduan/tre/releases/download/v0.4.0/tre-v0.4.0-x86_64-unknown-linux-musl.tar.gz" # https://github.com/dduan/tre
    - "https://releases.hashicorp.com/terraform/1.6.4/terraform_1.6.4_linux_amd64.zip"

- name: Plain Binaries - Fetch and Install
  become: true
  ansible.builtin.get_url:
    url: "{{ item.url }}"
    dest: "/usr/local/bin/{{ item.destname }}" 
    mode: "ugo+rx"
  loop:
    - { url: "https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage", destname: "nvim" }
    - { url: "https://github.com/prot0s34/simple-ssh-manager/releases/download/v0.1.11/sshmanager", destname: "sshmanager"}
    - { url: "https://dl.k8s.io/release/v1.28.2/bin/linux/amd64/kubectl", destname: "kubectl" }

- name: User Configs and Plugins - Fetch and Install
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
  loop:
    - { url: "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim", dest: "~/.local/share/nvim/site/autoload/" }

- name: Rustup install
  shell: curl --proto '=https' --tlsv1.3 https://sh.rustup.rs -sSf | sh -s -- -y 

- name: Check Oh My Zsh
  stat:
    path: ~/.oh-my-zsh/oh-my-zsh.sh
  register: oh_my_zsh_installed

- name: Install Oh My Zsh
  shell:
    cmd: "curl --proto '=https' --tlsv1.2 -fsS https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh | sh -s -- y"
  when: oh_my_zsh_installed.stat.exists == false

- name: Install Starship
  shell:
    cmd: "curl -sS https://starship.rs/install.sh | sh -s -- -y"
  become: true

- name: Install LunarVim
  shell: curl -s https://raw.githubusercontent.com/lunarvim/lunarvim/master/utils/installer/install.sh | bash || true

- name: Install macchina 
  shell: cargo install macchina && mv .cargo/bin/macchina /tmp/

- name: mv macchina
  shell: mv /tmp/macchina /usr/local/bin/
  become: true

- name: Clone dotfiles repository
  git:
    repo: https://github.com/prot0s34/dotfiles.git
    dest: /tmp/dotfiles/
    update: true
  become: true

- name: Clone zsh plugins 
  git:
    repo: "{{ item.repo }}"
    dest: "{{ item.dest }}"
    update: true
  loop:
    - { repo: "https://github.com/zsh-users/zsh-autosuggestions.git", dest: "~/.oh-my-zsh/custom/plugins/zsh-autosuggestions" }
    - { repo: "https://github.com/chrissicool/zsh-256color.git", dest: "~/.oh-my-zsh/custom/plugins/zsh-256color" }
    - { repo: "https://github.com/zsh-users/zsh-syntax-highlighting.git", dest: "~/.oh-my-zsh/plugins/zsh-syntax-highlighting" }

- name: Copy dotfiles in workdir
  command: rsync -a --exclude 'README.md' --exclude '.git' /tmp/dotfiles/ ~/

- name: Install nvim plugins
  command: nvim +PlugInstall +qall

- name: Install tmux TMP
  git:
    repo: https://github.com/tmux-plugins/tpm
    dest: ~/.tmux/plugins/tpm
    update: true

- name: Install tmux plugins
  command: ~/.tmux/plugins/tpm/scripts/install_plugins.sh

- name: Clone SFMono Nerd Font repository
  git:
    repo: https://github.com/shaunsingh/SFMono-Nerd-Font-Ligaturized.git
    dest: "/tmp/SFMono-Nerd-Font-Ligaturized"

- name: Copy fonts to ~/.local/share/fonts
  shell: "cp /tmp/SFMono-Nerd-Font-Ligaturized/*.otf ~/.local/share/fonts/"

- name: Change Shell to ZSH
  user:
    name: "{{ ansible_user }}"
    shell: /usr/bin/zsh
  become: true

- name: Create /etc/wsl.conf
  ansible.builtin.copy:
    content: |
      [network]
      generateResolvConf = false
      [interop]
      appendWindowsPath = false
      [boot]
      systemd=true
      [automount]
      enabled = true
      options = "metadata,umask=22,fmask=11"
    dest: /etc/wsl.conf
    owner: root
    group: root
    mode: '0644'
  become: true

    # lvim,
    # nvim-tree
    # go 1.20.5
    # terraform
    # ansible 
    # docker 
    # helm
    # k9s
    # kubectx
    # kubens 
    # tre alias 
